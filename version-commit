#!/usr/bin/env perl
#
# version-commit
# John Simpson <jms1@jms1.net> 2022-04-01
# Last updated 2025-02-18
#
# This script does two things:
#
# - Read a JSON structure from STDIN. This will be a list with two elements.
#   Print the contents of the second element, without any changes.
# - Read customized theme files from 'theme-tmeplate/' and use information
#   about the current state of the git working directory to write files in
#   the 'theme/' directory. (This is needed for mdbook 0.4.41 and later.)
#
###############################################################################
#
# MIT License
#
# Copyright (c) 2022-2025 John Simpson
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
###############################################################################

require 5.005 ;
use strict ;
use warnings ;

use JSON ;

my $do_debug = 0 ;

###############################################################################
#
# Run an external command, return its output

sub runit($)
{
    my $cmd = shift ;
    my $rv  = '' ;

    open ( R , "$cmd 2>&1 |" )
        or die "ERROR: runit('$cmd'): $!\n" ;

    while ( my $line = <R> )
    {
        $rv .= $line ;
    }

    close R ;

    return $rv ;
}

###############################################################################
#
# debug function

sub debug(@)
{
    if ( $do_debug )
    {
        if ( open ( DEBUG , '>>debug.txt' ) )
        {
            print DEBUG @_ ;
            close DEBUG ;
        }
    }
}

###############################################################################
###############################################################################
###############################################################################
#
# (1) Read STDIN, decode the JSON, print just the second element.

my $input = '' ;
{ local $/ = undef ; $input = <> ; }

my $j = decode_json( $input ) ;

print encode_json( $j->[1] ) ;

###############################################################################
#
# (2) Create theme/ files from theme-template/ files.

########################################
# Build the values we'll need.

my $commit_hash = runit( 'git describe --always --tags --dirty' ) ;
$commit_hash =~ s|\s+$|| ;

my $commit_time = runit( 'TZ=UTC0 git log -1 --no-show-signature --date=iso-local --format=%cd' ) ;
$commit_time =~ s|\s+$|| ;

my @d = gmtime() ;
my $now = sprintf( '%04d-%02d-%02d %02d:%02d:%02d +0000' ,
    $d[5]+1900 , $d[4]+1 , $d[3] , $d[2] , $d[1] , $d[0] ) ;

############################################################
# Loop through 'theme-template/*.hbs' files, substituting the values above
# wherever the substitution tags appear, and writing the results to files
# in the 'theme/' directory with the same filenames.
#
# Every new or updated file in the 'theme/' directory triggers a rebuild,
# which causes 'mdbook serve' to run this script again. This ends up running
# this script again, which causes an endless loop of rebuilds.
#
# In order to avoid this, I'm comparing the last modified time of each input
# file against the last modified time of the output file in the 'theme/'
# directory, and only rebuilding the file in 'theme/' when needed. Note that
# timestamps are limited to one-second resolution, so it's possible for the
# two files' timestamps to be identical for other reasons. At first I was
# using '<=' to compare the timestamps, but this caused some updates to be
# processed multiple times until the current time crossed a one-second
# boundary, so I decided to use '<' instead.
#
# A side-effect of this is that, while using 'make serve' to work on the
# content of the book, the timestamps shown in the ToC can be different than
# the timestamps at the bottom of each main page. This is why 'Makefile'
# deletes 'theme/*.hbs` before running each 'mdbook' command, to force this
# script to generate these files using the same timestamps used at the bottom
# of each page.

for my $infile ( glob 'theme-template/*.hbs' )
{
    my $outfile = $infile ;
    $outfile =~ s|^theme-template/|theme/| ;

    ########################################
    # Figure out if we need to rebuild this file or not.

    my $mtime_infile  =   (stat( $infile  ))[9]         ;
    my $mtime_outfile = ( (stat( $outfile ))[9] || -1 ) ;

    if ( $mtime_infile < $mtime_outfile )
    {
        debug "infile '$infile' ($mtime_infile) outfile $outfile' ($mtime_outfile) SKIP\n" ;

        next ;
    }
    else
    {
        debug "infile '$infile' ($mtime_infile) outfile '$outfile' ($mtime_outfile) PROCESS\n" ;
    }

    ########################################
    # Read the input file into memory.

    my $html = '' ;

    open( I , '<' , $infile )
        or die "ERROR: cannot read '$infile': $!\n" ;
    { local $/ = undef ; $html = <I> ; }
    close I ;

    ########################################
    # Substitute the values into the HTML.

    $html =~ s|\@VERSION_COMMIT_HASH\@|$commit_hash|gs ;
    $html =~ s|\@VERSION_COMMIT_TIME\@|$commit_time|gs ;
    $html =~ s|\@VERSION_COMMIT_NOW\@|$now|gs ;

    ########################################
    # Write the output file.

    open ( O , '>' , $outfile )
        or die "ERROR: cannot write '$outfile': $!\n" ;
    print O $html ;
    close O ;
}
