#!/bin/bash
#
# version-commit (as a shell script)
# John Simpson <jms1@jms1.net> 2025-07-28
# Last updated 2025-08-03
#
# Filter for mdbook, inserts git commit info into page templates

########################################
# List of tools which must be available for the script to work

TOOLS=( jq sed )

########################################
# May need to adjust the PATH if one of the required tools (i.e. 'jq') is
# installed in a non-standard directory.

PATH="/usr/bin:/bin:/usr/local/bin:/opt/homebrew/bin"

###############################################################################
#
# Print a debug message

DO_DEBUG=true

function debug {
    if $DO_DEBUG
    then
        echo "$*" 1>&2
    fi
}

###############################################################################
###############################################################################
###############################################################################
#
# Make sure the tools we need are available. If not, you should either install
# them, or updae the PATH= line above and make sure the directories where the
# tools are installed, are present in the PATH.

FAIL=false
for X in "${TOOLS[@]}"
do
    if ! type -t "$X" > /dev/null
    then
        echo "ERROR: '$X' is not available in your PATH, cannot continue"
        FAIL=true
    fi
done

if $FAIL
then
    exit 1
fi

###############################################################################
#
# Print the second element from the JSON structure, without any modifications.

jq -r -M '.[1]'

###############################################################################
#
# Build the modified theme template files

########################################
# Build the values we'll be substituting into the files

VERSION_COMMIT_HASH="$( git describe --always --tags --dirty )"
VERSION_COMMIT_TIME="$( TZ=UTC0 git log -1 --no-show-signature --date=iso-local --format=%cd )"
VERSION_COMMIT_NOW="$( date -u '+%Y-%m-%d %H:%M:%S' )"

########################################
# Build the substitution command that 'sed' will need below

SED1="s/@VERSION_COMMIT_HASH@/${VERSION_COMMIT_HASH}/"
SED2="s/@VERSION_COMMIT_TIME@/${VERSION_COMMIT_TIME}/"
SED3="s/@VERSION_COMMIT_NOW@/${VERSION_COMMIT_NOW}/"

SED_CMD="{$SED1;$SED2;$SED3;}"

###############################################################################
#
# Loop through 'theme-template/*.hbs' files, substituting the values above
# wherever the substitution tags appear, and writing the results to files
# in the 'theme/' directory with the same filenames.
#
# Every new or updated file in the 'theme/' directory triggers a rebuild,
# which causes 'mdbook serve' to run this script again. This ends up running
# this script again, which causes an endless loop of rebuilds.
#
# In order to avoid this, I'm comparing the last modified time of each input
# file against the last modified time of the output file in the 'theme/'
# directory, and only rebuilding the file in 'theme/' when needed. Note that
# timestamps are limited to one-second resolution, so it's possible for the
# two files' timestamps to be identical for other reasons. At first I was
# using '<=' to compare the timestamps, but this caused some updates to be
# processed multiple times until the current time crossed a one-second
# boundary, so I decided to use '<' instead.
#
# A side-effect of this is that, while using 'make serve' to work on the
# content of the book, the timestamps shown in the ToC can be different than
# the timestamps at the bottom of each main page. This is why 'Makefile'
# deletes 'theme/*.hbs` before running each 'mdbook' command, to force this
# script to generate these files using the same timestamps used at the bottom
# of each page.

for INFILE in theme-template/*.hbs
do
    OUTFILE="theme/${INFILE#theme-template/}"

    if [[ ! "$INFILE" -nt "$OUTFILE" ]]
    then
        debug "infile '$INFILE' older than '$OUTFILE', skipping"
        continue
    fi

    sed "$SED_CMD" "$INFILE" > "$OUTFILE"
done
